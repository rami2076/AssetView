コーディング規約は Google Java Style Guide(非公式和訳)を参考にした。
URL
https://kazurof.github.io/GoogleJavaStyle-ja/#s3-2-package-statement

今回は、命名に関してコーディング規約を設けた。
それ以外に関しては、取り決めを設けていない。
問題が発生次第、規約の範囲を拡充していく予定である。



5.2 識別子の種類ごとのルール

5.2.1 パッケージ名

パッケージ名はすべて小文字で連続する単語をそのまま繋げる。アンダースコアは使わない。例えば、 com.example.deepspace であって、 com.example.deepSpace や com.example.deep_space は使わない。

5.2.2 クラス名

クラス名は大文字キャメルケース(UpperCamelCase)で命名する。

クラス名は大抵名詞か名詞句である。例えば、 Character や、 ImmutableList である。インターフェース名も名詞か名詞句である。（例えば List である。）しかし、場合によっては形容詞や形容詞句になる。（例えば、 Readable である。）

アノテーション型に対する特定のルールや確立した規約はない。

テストクラスはテスト対象クラス名で始まり、 Test で終わるよう命名される。例えば HashTest や、 HashIntegrationTest である。

5.2.3 メソッド名

メソッド名は、小文字キャメルケース(lowerCamelCase)で命名される。

メソッド名は大抵動詞か動詞句である。例えば、 sendMessage や stop である。

アンダースコアはJUnitのメソッド名において、名前の論理的コンポーネント名を分離するために使ってよい。典型的なパターンは test<MethodUnderTest>_<state> で、例えば testPop_emptyStack である。テストメソッドを命名する正しい唯一の方法はない。

5.2.4 定数名

定数は コンスタントケース(CONSTANT_CASE)で命名する。すべて大文字で、各単語をアンダースコアで区切る。しかし定数とは正確には何だろうか。

定数とは、その内容が不変であってそのメソッドは検知可能な副作用を持たないような static final なフィールドである。
例えば、プリミティブ型、String、不変な型、不変な型の不変なコレクションである。
もしインスタンスの観測可能な状態が変化できるなら、それは定数ではない。
単に絶対にオブジェクトを変更しないことを意図するだけでは大抵は不十分である。

例：

// 定数である
static final int NUMBER = 5;
static final ImmutableList<String> NAMES = ImmutableList.of("Ed", "Ann");
static final ImmutableMap<String, Integer> AGES = ImmutableMap.of("Ed", 35, "Ann", 32);
static final Joiner COMMA_JOINER = Joiner.on(',');  // Joiner は不変であるので。
static final SomeMutableType[] EMPTY_ARRAY = {};
enum SomeEnum { ENUM_CONSTANT }

// 定数でない
static String nonFinal = "non-final";
final String nonStatic = "non-static";
static final Set<String> mutableCollection = new HashSet<String>();
static final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);
static final ImmutableMap<String, SomeMutableType> mutableValues =
    ImmutableMap.of("Ed", mutableInstance, "Ann", mutableInstance2);
static final Logger logger = Logger.getLogger(MyClass.getName());
static final String[] nonEmptyArray = {"these", "can", "change"};
これらの名前は大抵名詞か名詞句である。

5.2.5 定数でないフィールド名

定数でないフィールド名（staticであってもなくても）は小文字キャメルケース(lowerCamelCase)で命名される。

これらの名前は大抵名詞か名詞句である。例えば computedValues や index である。

5.2.6 パラメータ名

パラメータ名は小文字キャメルケース(lowerCamelCase)で命名される。

一文字のパラメータ名はpublic なメソッドでは避けるべきである。

5.2.7 ローカル変数名

ローカル変数名は小文字キャメルケース(lowerCamelCase)で命名される。

final で不変であってもローカル変数は定数とは見なされないので定数として命名されるのは避けるべきである。

5.2.8 型変数名

型変数名は以下の２つのやり方のうちいずれかで命名される。

一つの大文字アルファベット。それに１個の数字が続いて良い。例： E, T, X, T2
クラスの命名（5.2.2節 クラス名 ）の後ろに、大文字Tを付加する。例： RequestT, FooBarT
5.3 キャメルケースの定義

時として、"IPv6"や、"iOS"のような頭字語や見慣れない形があるように、英語のフレーズをキャメルケースに変換する合理的な方法は複数ある。正確さを維持するため、Google Styleでは以下のような（ほぼ）決定的な手順を定義する。

名前の通常の形から始めて、

言葉を素のASCIIに変換し、アポストロフィを除去する。例えば、"Müller’s algorithm" は “Muellers algorithm”に変換される。
これをスペースや残っている句読点（大抵はハイフン）で分離し、単語に分割する。
推奨：もしもある単語が通常の利用において既に慣習的にキャメルケースの形をとっているならばそれも分解する。（例：「AdWords」 を 「ad words」にする。）「iOS」のような単語そのものは真にキャメルケースになっておらず、どんな規約にも当てはまらないのでこの推奨も適用されないないことに注意すること。
（頭字語を含めて）すべてを小文字にする。そして以下の語の最初の文字を大文字にする。
それぞれの単語。この場合大文字キャメルケースとなる。
最初の単語を除いたそれぞれの単語。この場合小文字キャメルケースになる。
最後に、すべての単語を１個の識別子として連結する。
元々の単語の大文字小文字はほとんど全て無視される。例えば、

元々の形	正しい変換例	誤った変換例
“XML HTTP request”	XmlHttpRequest	XMLHTTPRequest
“new customer ID”	newCustomerId	newCustomerID
“inner stopwatch”	innerStopwatch	innerStopWatch
“supports IPv6 on iOS?”	supportsIpv6OnIos	supportsIPv6OnIOS
“YouTube importer”	YouTubeImporter 
YoutubeImporter 2	
2 やってよいが推奨されない。

注釈： いくつかの単語は英語として曖昧にハイフン付けされている。例えば、"nonempty" と “non-empty” はどちらも正しい。それゆえ同様に checkNonempty と checkNonEmpty というメソッド名はどちらも正しい。


